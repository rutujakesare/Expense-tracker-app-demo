 const { Cashfree, CFEnvironment } = require("cashfree-pg");

  const cashfree = new Cashfree(CFEnvironment.SANDBOX, "TEST430329ae80e0f32e41a393d78b923034", "TESTaf195616268bd6202eeb3bf8dc458956e7192a85");

    exports.createOrder = async (
      orderId,
      orderAmount,
      orderCurrency="INR",
      customerID,
      customerPhone
    ) => {
      try {

        const expiryDate = new Date(Date.now() + 60 * 60 * 1000); // 1 hour from now
        const formattedExpiryDate = expiryDate.toISOString();

        const request = {
          order_amount: orderAmount,
          order_currency: orderCurrency,
          order_id: orderId,
          
          customer_details: {
            customer_id: customerID,  
            customer_phone: customerPhone,
          },

          order_meta: {
            
            return_url:`http://localhost:5000/payment/payment-status/${orderId}`,
            payment_methods: "ccc, upi, nb"
          },
          order_expiry_time: formattedExpiryDate,
        };

        const response = await cashfree.PGCreateOrder(request);
        return response.data.payment_session_id;
      } catch (error) {
        console.error("Error creating order:", error.message);
      }
    };
    

    exports.getPaymentStatus = async (orderId) => {
  try {
    const response = await cashfree.PGOrderFetchPayments(orderId);
    const payments = response.data;

    const hasSuccess = payments.some(
      (transaction) => transaction.payment_status === "SUCCESS"
    );
    const hasPending = payments.some(
      (transaction) => transaction.payment_status === "PENDING"
    );

    if (hasSuccess) return "SUCCESS";
    if (hasPending) return "PENDING";
    return "FAILURE";
  } catch (error) {
    console.error("Error fetching payment status:", error.message);
    throw error;
  }
};